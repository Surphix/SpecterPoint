/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TargetsImport } from './routes/targets'
import { Route as ConfigurationImport } from './routes/configuration'
import { Route as BlacklistImport } from './routes/blacklist'
import { Route as ServersViewImport } from './routes/servers.view'
import { Route as ServersCreateImport } from './routes/servers.create'
import { Route as ListenersViewImport } from './routes/listeners.view'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TargetsRoute = TargetsImport.update({
  path: '/targets',
  getParentRoute: () => rootRoute,
} as any)

const ConfigurationRoute = ConfigurationImport.update({
  path: '/configuration',
  getParentRoute: () => rootRoute,
} as any)

const BlacklistRoute = BlacklistImport.update({
  path: '/blacklist',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ServersViewRoute = ServersViewImport.update({
  path: '/servers/view',
  getParentRoute: () => rootRoute,
} as any)

const ServersCreateRoute = ServersCreateImport.update({
  path: '/servers/create',
  getParentRoute: () => rootRoute,
} as any)

const ListenersViewRoute = ListenersViewImport.update({
  path: '/listeners/view',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/blacklist': {
      id: '/blacklist'
      path: '/blacklist'
      fullPath: '/blacklist'
      preLoaderRoute: typeof BlacklistImport
      parentRoute: typeof rootRoute
    }
    '/configuration': {
      id: '/configuration'
      path: '/configuration'
      fullPath: '/configuration'
      preLoaderRoute: typeof ConfigurationImport
      parentRoute: typeof rootRoute
    }
    '/targets': {
      id: '/targets'
      path: '/targets'
      fullPath: '/targets'
      preLoaderRoute: typeof TargetsImport
      parentRoute: typeof rootRoute
    }
    '/listeners/view': {
      id: '/listeners/view'
      path: '/listeners/view'
      fullPath: '/listeners/view'
      preLoaderRoute: typeof ListenersViewImport
      parentRoute: typeof rootRoute
    }
    '/servers/create': {
      id: '/servers/create'
      path: '/servers/create'
      fullPath: '/servers/create'
      preLoaderRoute: typeof ServersCreateImport
      parentRoute: typeof rootRoute
    }
    '/servers/view': {
      id: '/servers/view'
      path: '/servers/view'
      fullPath: '/servers/view'
      preLoaderRoute: typeof ServersViewImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  BlacklistRoute,
  ConfigurationRoute,
  TargetsRoute,
  ListenersViewRoute,
  ServersCreateRoute,
  ServersViewRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/blacklist",
        "/configuration",
        "/targets",
        "/listeners/view",
        "/servers/create",
        "/servers/view"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/blacklist": {
      "filePath": "blacklist.tsx"
    },
    "/configuration": {
      "filePath": "configuration.tsx"
    },
    "/targets": {
      "filePath": "targets.tsx"
    },
    "/listeners/view": {
      "filePath": "listeners.view.tsx"
    },
    "/servers/create": {
      "filePath": "servers.create.tsx"
    },
    "/servers/view": {
      "filePath": "servers.view.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
